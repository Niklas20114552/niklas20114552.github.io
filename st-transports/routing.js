const network={lines:[{name:"UST 1",stations:["Evergreen","Outpost","Seacrestica","Pagasa City","Illyria"]},{name:"UST 2",stations:["Illyria","Pagasa City","Seacrestica","Outpost","Evergreen"]},{name:"UST 3",stations:["Malus","Outpost"]},{name:"UST 4",stations:["Outpost","Malus"]}],stations:[{name:"Evergreen",lines:[{name:"UST 1",platform:1},{name:"UST 2",platform:2}]},{name:"Outpost",lines:[{name:"UST 1",platform:0},{name:"UST 2",platform:0},{name:"UST 3",platform:2},{name:"UST 4",platform:1}]},{name:"Seacrestica",lines:[{name:"UST 1",platform:0},{name:"UST 2",platform:0}]},{name:"Pagasa City",lines:[{name:"UST 1",platform:0},{name:"UST 2",platform:0}]},{name:"Illyria",lines:[{name:"UST 1",platform:2},{name:"UST 2",platform:1}]},{name:"Malus",lines:[{name:"UST 3",platform:1},{name:"UST 4",platform:2}]}],doublelines:[["UST 1","UST 2"],["UST 3","UST 4"]],traveltimes:[{start:"Evergreen",end:"Outpost",time:42},{start:"Outpost",end:"Seacrestica",time:24},{start:"Pagasa City",end:"Seacrestica",time:20},{start:"Illyria",end:"Pagasa City",time:32},{start:"Malus",end:"Outpost",time:114}],prices:{1:4,2:2}};function findRoutes(t,e,a){const n=(e,a)=>{for(const n of t.doublelines)if(n.includes(e)&&n.includes(a))return!0;return!1},s=(t,e,r,m=null)=>{if(t!==a)for(const a of l[t]){const l=a.name;if(m&&n(m,l))continue;const o=i[l];for(let a=o.indexOf(t)+1;a<o.length;a++){const n=o[a];r.has(n)||(r.add(n),e.length&&e[e.length-1].line===l?e[e.length-1].stations.push(n):e.push({line:l,stations:[t,n]}),s(n,e,r,l),r.delete(n),e.length&&e[e.length-1].stations[e[e.length-1].stations.length-1]===n&&(2===e[e.length-1].stations.length?e.pop():e[e.length-1].stations.pop()))}}else o.push([...e])},l=t.stations.reduce(((t,e)=>(t[e.name]=e.lines,t)),{}),i=t.lines.reduce(((t,e)=>(t[e.name]=e.stations,t)),{}),o=[];return s(e,[],new Set([e])),o};function getTravelTime(e,t){let n,s;e.localeCompare(t)>0?(n=t,s=e):(n=e,s=t);for(var a=0;a<network.traveltimes.length;a++)if(network.traveltimes[a].start==n&&network.traveltimes[a].end==s)return network.traveltimes[a].time}function filterArrayByBounds(e,t,n){let s=e.indexOf(t),a=e.indexOf(n);return-1===s||-1===a?[]:e.slice(s,a+1)}function getStops(e,t,n){let s;for(var a=0;a<network.lines.length;a++)network.lines[a].name==n&&(s=network.lines[a].stations);return filterArrayByBounds(s,e,t)}function getTravelTimeForStops(e){let t=0;for(var n=0;n<e.length-1;n++)t+=getTravelTime(e[n],e[n+1]);return t}

function getPlatformOfStop(station, line) {
    let station_str;
    for (var i = 0; i < network.stations.length; i++) {
        if (network.stations[i].name == station) {
            station_str = network.stations[i];
        }
    }
    for (var i = 0; i < station_str.lines.length; i++) {
        if (station_str.lines[i].name == line) {
            return station_str.lines[i].platform;
        }
    }
}